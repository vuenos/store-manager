#stages:
#  - build
#  - deploy
#
#variables:
#  ECR_REGISTRY: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#
#build-stage:
#  stage: build
#  image:
#    name: docker:latest
#  variables:
#    NEXT_IMAGE_NAME: shc-front-stage-nextjs
##    NGINX_IMAGE_NAME: shc-front-stage-nginx
#  services:
#    - docker:dind
#  before_script:
#    - apk add --no-cache curl jq python3 py3-pip
#    - pip install awscli
#    - aws ecr get-login-password | docker login -u AWS --password-stdin $ECR_REGISTRY
#  script:
#    - docker build . --file ./docker/nextjs/Dockerfile --tag $ECR_REGISTRY/$NEXT_IMAGE_NAME:latest
#    - docker push $ECR_REGISTRY/$NEXT_IMAGE_NAME:latest
##    - docker build . --file ./docker/nginx/Dockerfile --tag $ECR_REGISTRY/$NGINX_IMAGE_NAME:latest
##    - docker push $ECR_REGISTRY/$NGINX_IMAGE_NAME:latest
#  rules:
#    - if: $CI_COMMIT_BRANCH == "develop"
#
#build-prod:
#  stage: build
#  image:
#    name: docker:latest
#  variables:
#    NEXT_IMAGE_NAME: shc-front-nextjs
##    NGINX_IMAGE_NAME: shc-front-nginx
#  services:
#    - docker:dind
#  before_script:
#    - apk add --no-cache curl jq python3 py3-pip
#    - pip install awscli
#    - aws ecr get-login-password | docker login -u AWS --password-stdin $ECR_REGISTRY
#  script:
#    - docker build . --file ./docker/nextjs/Dockerfile --tag $ECR_REGISTRY/$NEXT_IMAGE_NAME:latest
#    - docker push $ECR_REGISTRY/$NEXT_IMAGE_NAME:latest
##    - docker build . --file ./docker/nginx/Dockerfile --tag $ECR_REGISTRY/$NGINX_IMAGE_NAME:latest
##    - docker push $ECR_REGISTRY/$NGINX_IMAGE_NAME:latest
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"
#
#deploy-stage:
#  stage: deploy
#  image:
#    name: docker:latest
#  services:
#    - docker:dind
#  before_script:
#    - apk add --no-cache curl jq python3 py3-pip
#    - pip install awscli
#  script:
##    - aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json $CI_AWS_ECS_TASK_DEFINITION_FILE
#    - aws ecs update-service --region $AWS_DEFAULT_REGION --cluster $AWS_ECS_CLUSTER_SHC_STAGE --service $AWS_ECS_SERVICE_SHC_STAGE_FRONT --force-new-deployment
#  rules:
#    - if: $CI_COMMIT_BRANCH == "develop"
#
#deploy-prod:
#  stage: deploy
#  image:
#    name: docker:latest
#  services:
#    - docker:dind
#  before_script:
#    - apk add --no-cache curl jq python3 py3-pip
#    - pip install awscli
#  script:
#    #    - aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json $CI_AWS_ECS_TASK_DEFINITION_FILE
#    - aws ecs update-service --region $AWS_DEFAULT_REGION --cluster $AWS_ECS_CLUSTER_SHC --service $AWS_ECS_SERVICE_SHC_FRONT --force-new-deployment
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"