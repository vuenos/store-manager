stages:
  - build

variables:
  ECR_REGISTRY: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

build-stage:
  stage: build
  image:
    name: docker:latest
  variables:
    NEXT_IMAGE_NAME: shc-front-stage-nextjs
    NGINX_IMAGE_NAME: shc-front-stage-nginx
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id $ECR_ACCESS_KEY
    - aws configure set aws_secret_access_key $ECR_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - aws ecr get-login-password | docker login -u AWS --password-stdin $ECR_REGISTRY
  script:
    - docker build . --file ./docker/nextjs/Dockerfile --tag $ECR_REGISTRY/NEXT_IMAGE_NAME:latest
    - docker push $ECR_REGISTRY/NEXT_IMAGE_NAME:latest
    - docker build . --file ./docker/nginx/Dockerfile --tag $ECR_REGISTRY/NGINX_IMAGE_NAME:latest
    - docker push $ECR_REGISTRY/NGINX_IMAGE_NAME:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

build-prod:
  stage: build
  image:
    name: docker:latest
  variables:
    NEXT_IMAGE_NAME: shc-front-nextjs
    NGINX_IMAGE_NAME: shc-front-nginx
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id $ECR_ACCESS_KEY
    - aws configure set aws_secret_access_key $ECR_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - aws ecr get-login-password | docker login -u AWS --password-stdin $ECR_REGISTRY
  script:
    - docker build . --file ./docker/nextjs/Dockerfile --tag $ECR_REGISTRY/NEXT_IMAGE_NAME:latest
    - docker push $ECR_REGISTRY/NEXT_IMAGE_NAME:latest
    - docker build . --file ./docker/nginx/Dockerfile --tag $ECR_REGISTRY/NGINX_IMAGE_NAME:latest
    - docker push $ECR_REGISTRY/NGINX_IMAGE_NAME:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"